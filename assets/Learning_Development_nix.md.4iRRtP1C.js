import{_ as t,c as n,o as e,a4 as i}from"./chunks/framework.B7YSrJ1r.js";const h=JSON.parse('{"title":"Backend Development Essentials","description":"","frontmatter":{},"headers":[],"relativePath":"Learning/Development/nix.md","filePath":"Learning/Development/nix.md","lastUpdated":1744281772000}'),s={name:"Learning/Development/nix.md"},r=i('<h1 id="backend-development-essentials" tabindex="-1">Backend Development Essentials <a class="header-anchor" href="#backend-development-essentials" aria-label="Permalink to &quot;Backend Development Essentials&quot;">​</a></h1><h2 id="python" tabindex="-1">Python <a class="header-anchor" href="#python" aria-label="Permalink to &quot;Python&quot;">​</a></h2><ul><li><strong>Core concepts</strong>: Variables, data types, control structures (if/else, loops), functions, modules</li><li><strong>OOP</strong>: Classes, inheritance, encapsulation, polymorphism</li><li><strong>Functional features</strong>: List comprehensions, lambda functions, map/filter/reduce</li><li><strong>Package management</strong>: pip, virtual environments (venv)</li><li><strong>Standard library</strong>: os, sys, datetime, json, csv, requests</li></ul><h2 id="unittest" tabindex="-1">unittest <a class="header-anchor" href="#unittest" aria-label="Permalink to &quot;unittest&quot;">​</a></h2><ul><li><strong>Built-in testing framework</strong> for Python</li><li><strong>Basic structure</strong>: TestCase classes, setUp/tearDown methods</li><li><strong>Assertions</strong>: assertEqual, assertTrue, assertRaises, etc.</li><li><strong>Test discovery</strong>: Running tests with patterns</li><li><strong>Test runners</strong>: Running single tests or test suites</li></ul><h2 id="pytest" tabindex="-1">pytest <a class="header-anchor" href="#pytest" aria-label="Permalink to &quot;pytest&quot;">​</a></h2><ul><li><strong>Modern testing framework</strong> with simpler syntax than unittest</li><li><strong>Fixtures</strong>: Reusable test resources and setup/teardown</li><li><strong>Parametrization</strong>: Running tests with multiple inputs</li><li><strong>Markers</strong>: Categorizing and selecting tests</li><li><strong>Plugins</strong>: Extending functionality (coverage, mock, etc.)</li><li><strong>Assertions</strong>: Simple assert statements with rich failure messages</li></ul><h2 id="sqlalchemy" tabindex="-1">SQLAlchemy <a class="header-anchor" href="#sqlalchemy" aria-label="Permalink to &quot;SQLAlchemy&quot;">​</a></h2><ul><li><strong>ORM (Object Relational Mapper)</strong> for database interactions</li><li><strong>Engine and Connection</strong>: Database connectivity</li><li><strong>Declarative Base</strong>: Defining database models</li><li><strong>Session</strong>: Managing database transactions</li><li><strong>Relationships</strong>: one-to-many, many-to-many</li><li><strong>Querying</strong>: filter, join, order_by, group_by, etc.</li><li><strong>Migrations</strong>: Schema versioning (often used with Alembic)</li></ul><h2 id="fastapi" tabindex="-1">FastAPI <a class="header-anchor" href="#fastapi" aria-label="Permalink to &quot;FastAPI&quot;">​</a></h2><ul><li><strong>Modern, high-performance web framework</strong> based on Python type hints</li><li><strong>Path operations</strong>: Defining API endpoints (GET, POST, etc.)</li><li><strong>Path parameters</strong> and <strong>query parameters</strong></li><li><strong>Request body</strong>: Using Pydantic models for validation</li><li><strong>Dependency injection</strong> system</li><li><strong>Automatic documentation</strong>: Swagger UI and ReDoc</li><li><strong>Authentication</strong>: OAuth2, JWT, etc.</li></ul><h2 id="typer" tabindex="-1">Typer <a class="header-anchor" href="#typer" aria-label="Permalink to &quot;Typer&quot;">​</a></h2><ul><li><strong>CLI builder</strong> based on Python type hints (from FastAPI creator)</li><li><strong>Commands and subcommands</strong>: Structured CLI apps</li><li><strong>Arguments and options</strong>: Accepting user input</li><li><strong>Help text generation</strong>: Automatic documentation</li><li><strong>Completion support</strong>: Tab completion for shells</li></ul><h2 id="alembic" tabindex="-1">Alembic <a class="header-anchor" href="#alembic" aria-label="Permalink to &quot;Alembic&quot;">​</a></h2><ul><li><strong>Database migration tool</strong> designed for SQLAlchemy</li><li><strong>Migration environment</strong>: Setting up the migration directory</li><li><strong>Revision scripts</strong>: Creating and applying migrations</li><li><strong>Commands</strong>: init, revision, upgrade, downgrade, etc.</li><li><strong>Auto-generation</strong>: Creating migrations from model changes</li><li><strong>Branch management</strong>: Handling multiple migration paths</li></ul><h1 id="frontend-development-essentials" tabindex="-1">Frontend Development Essentials <a class="header-anchor" href="#frontend-development-essentials" aria-label="Permalink to &quot;Frontend Development Essentials&quot;">​</a></h1><h2 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;React&quot;">​</a></h2><ul><li><strong>Component-based library</strong> for building user interfaces</li><li><strong>JSX</strong>: XML-like syntax for describing UI</li><li><strong>Components</strong>: Function components vs class components</li><li><strong>Props</strong>: Passing data down to components</li><li><strong>State</strong>: Managing component data with useState</li><li><strong>Lifecycle</strong>: Using useEffect for side effects</li><li><strong>Hooks</strong>: useState, useEffect, useContext, useRef, etc.</li><li><strong>Context API</strong>: Sharing state across components</li></ul><h2 id="nextui" tabindex="-1">NextUI <a class="header-anchor" href="#nextui" aria-label="Permalink to &quot;NextUI&quot;">​</a></h2><ul><li><strong>Component library</strong> for React applications</li><li><strong>Pre-built components</strong>: Buttons, cards, inputs, modals, etc.</li><li><strong>Theming</strong>: Customizing look and feel</li><li><strong>Dark mode support</strong></li><li><strong>Responsive layouts</strong></li><li><strong>Accessibility</strong> features built-in</li></ul><h2 id="tailwindcss" tabindex="-1">TailwindCSS <a class="header-anchor" href="#tailwindcss" aria-label="Permalink to &quot;TailwindCSS&quot;">​</a></h2><ul><li><strong>Utility-first CSS framework</strong></li><li><strong>Utility classes</strong>: Applying styles directly in HTML/JSX</li><li><strong>Responsive design</strong>: Breakpoint prefixes (sm:, md:, lg:, etc.)</li><li><strong>Customization</strong>: Extending theme in tailwind.config.js</li><li><strong>JIT (Just-In-Time) compiler</strong>: On-demand utility generation</li><li><strong>Plugins</strong>: Extending functionality</li><li><strong>@apply directive</strong>: Extracting utility patterns</li></ul><h2 id="typescript-basic" tabindex="-1">TypeScript (basic) <a class="header-anchor" href="#typescript-basic" aria-label="Permalink to &quot;TypeScript (basic)&quot;">​</a></h2><ul><li><strong>Typed superset of JavaScript</strong></li><li><strong>Type annotations</strong>: Specifying types for variables, parameters, etc.</li><li><strong>Interfaces and types</strong>: Defining custom types</li><li><strong>Type inference</strong>: Automatic type detection</li><li><strong>Generics</strong>: Creating reusable components with different types</li><li><strong>Type assertions</strong>: Overriding inferred types</li><li><strong>Type checking</strong>: Catching errors at compile time</li></ul><h2 id="tanstack-router" tabindex="-1">TanStack Router <a class="header-anchor" href="#tanstack-router" aria-label="Permalink to &quot;TanStack Router&quot;">​</a></h2><ul><li><strong>Type-safe routing</strong> for React applications</li><li><strong>File-based routing</strong> options</li><li><strong>Route parameters</strong> and <strong>search parameters</strong></li><li><strong>Nested routes</strong> and <strong>layouts</strong></li><li><strong>Route guards</strong> and <strong>loaders</strong></li><li><strong>Navigation</strong>: Link component and programmatic navigation</li></ul><h2 id="tanstack-query-formerly-react-query" tabindex="-1">TanStack Query (formerly React Query) <a class="header-anchor" href="#tanstack-query-formerly-react-query" aria-label="Permalink to &quot;TanStack Query (formerly React Query)&quot;">​</a></h2><ul><li><strong>Data fetching and state management</strong> library</li><li><strong>Queries</strong>: Fetching and caching data</li><li><strong>Mutations</strong>: Updating data on the server</li><li><strong>Caching</strong>: Automatic caching and stale-while-revalidate</li><li><strong>Pagination</strong> and <strong>infinite scrolling</strong></li><li><strong>Query invalidation</strong>: Refreshing data when needed</li><li><strong>Dependent queries</strong>: Queries that depend on others</li></ul><h2 id="vite-with-file-based-routing" tabindex="-1">Vite (with file-based routing) <a class="header-anchor" href="#vite-with-file-based-routing" aria-label="Permalink to &quot;Vite (with file-based routing)&quot;">​</a></h2><ul><li><strong>Fast, modern build tool</strong> for frontend development</li><li><strong>Dev server</strong>: Hot Module Replacement (HMR)</li><li><strong>Build optimization</strong>: Faster production builds</li><li><strong>Plugin system</strong>: Extending functionality</li><li><strong>File-based routing</strong>: Organizing routes by file structure</li><li><strong>Environment variables</strong>: Managing different environments</li><li><strong>Static asset handling</strong>: Importing and optimizing assets</li></ul>',30),o=[r];function a(l,g,c,d,u,m){return e(),n("div",null,o)}const f=t(s,[["render",a]]);export{h as __pageData,f as default};
