import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.B7YSrJ1r.js";const E=JSON.parse('{"title":"🌟 OOPS Concepts","description":"","frontmatter":{},"headers":[],"relativePath":"Learning/OOPS/index.md","filePath":"Learning/OOPS/index.md","lastUpdated":1725889675000}'),e={name:"Learning/OOPS/index.md"},t=n(`<h1 id="🌟-oops-concepts" tabindex="-1">🌟 OOPS Concepts <a class="header-anchor" href="#🌟-oops-concepts" aria-label="Permalink to &quot;🌟 OOPS Concepts&quot;">​</a></h1><h2 id="🔒-encapsulation" tabindex="-1">🔒 Encapsulation <a class="header-anchor" href="#🔒-encapsulation" aria-label="Permalink to &quot;🔒 Encapsulation&quot;">​</a></h2><p>Encapsulation is the process of <strong>bundling data</strong> and the <strong>functions that operate on that data</strong> into a single unit, while restricting access to some internal components. This hides the internal state and requires all interactions to happen through methods.</p><h3 id="🚗-example" tabindex="-1">🚗 Example: <a class="header-anchor" href="#🚗-example" aria-label="Permalink to &quot;🚗 Example:&quot;">​</a></h3><p>Consider a <strong>Car</strong> class. It encapsulates data like <code>make</code>, <code>model</code>, <code>year</code>, and has methods like <code>start()</code>, <code>stop()</code>, and <code>accelerate()</code>. The internal workings of these methods are hidden from the user.</p><hr><h2 id="🎭-abstraction" tabindex="-1">🎭 Abstraction <a class="header-anchor" href="#🎭-abstraction" aria-label="Permalink to &quot;🎭 Abstraction&quot;">​</a></h2><p>Abstraction allows us to focus on the <strong>essential features</strong> of an object without getting into the details of how it&#39;s implemented. It simplifies complex realities by modeling classes appropriately.</p><h3 id="🖌️-example" tabindex="-1">🖌️ Example: <a class="header-anchor" href="#🖌️-example" aria-label="Permalink to &quot;🖌️ Example:&quot;">​</a></h3><p>A <strong>Shape</strong> class may have methods like <code>draw()</code> and <code>calculateArea()</code>. Whether it&#39;s a <strong>Circle</strong> or a <strong>Rectangle</strong>, you don’t need to know how the calculations are performed—just that they work.</p><ul><li><strong>Encapsulation</strong>: <em>Information hiding</em></li><li><strong>Abstraction</strong>: <em>Implementation hiding</em></li></ul><h3 id="📝-example-in-c" tabindex="-1">📝 Example in C++: <a class="header-anchor" href="#📝-example-in-c" aria-label="Permalink to &quot;📝 Example in C++:&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Here, the internal data <code>a</code> and <code>b</code> are hidden.<br><strong>➡️ Encapsulation</strong> hides the internal structure of the class.<br> When calling <code>add()</code>, how the function works is hidden.<br><strong>➡️ Abstraction</strong> hides the method&#39;s internal implementation.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo_obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo_obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h2 id="🔄-polymorphism" tabindex="-1">🔄 Polymorphism <a class="header-anchor" href="#🔄-polymorphism" aria-label="Permalink to &quot;🔄 Polymorphism&quot;">​</a></h2><p>Polymorphism enables us to define a single interface or method that works across different types. It comes in two forms: <strong>method overriding</strong> and <strong>method overloading</strong>.</p><h3 id="🐕-example" tabindex="-1">🐕 Example: <a class="header-anchor" href="#🐕-example" aria-label="Permalink to &quot;🐕 Example:&quot;">​</a></h3><p><code>Animal</code> class may have a method <code>makeSound()</code>. Subclasses like <code>Dog</code> and <code>Cat</code> can override this method to provide specific behavior. This lets us handle multiple types of animals using a single method call:</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Animal dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">makeSound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Outputs &quot;Bark!&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h2 id="🧬-inheritance" tabindex="-1">🧬 Inheritance <a class="header-anchor" href="#🧬-inheritance" aria-label="Permalink to &quot;🧬 Inheritance&quot;">​</a></h2><p>Inheritance is a mechanism that allows a new class to <strong>inherit properties and methods</strong> from an existing class, promoting reusability.</p><h3 id="🚗-example-1" tabindex="-1">🚗 Example: <a class="header-anchor" href="#🚗-example-1" aria-label="Permalink to &quot;🚗 Example:&quot;">​</a></h3><p>A <code>Vehicle</code> class with properties like <code>speed</code> and methods like <code>move()</code> can be inherited by a <code>Car</code> class, which will automatically gain access to these features.</p><hr><h3 id="🛠-virtual-functions" tabindex="-1">🛠 Virtual Functions <a class="header-anchor" href="#🛠-virtual-functions" aria-label="Permalink to &quot;🛠 Virtual Functions&quot;">​</a></h3><p>Virtual functions in C++ enable <strong>run-time polymorphism</strong>, allowing derived classes to modify behaviors defined in a base class.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeSound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Some sound&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeSound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Bark!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>This allows dynamic behavior based on the object type at runtime.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myDog-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">makeSound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,32),l=[t];function h(p,r,o,d,k,c){return i(),a("div",null,l)}const m=s(e,[["render",h]]);export{E as __pageData,m as default};
