import{_ as e,c as a,o as t,a4 as s}from"./chunks/framework.B7YSrJ1r.js";const p=JSON.parse('{"title":"üíª Operating Systems Concepts","description":"","frontmatter":{},"headers":[],"relativePath":"Learning/OS/index.md","filePath":"Learning/OS/index.md","lastUpdated":1725889675000}'),r={name:"Learning/OS/index.md"},i=s('<h1 id="üíª-operating-systems-concepts" tabindex="-1">üíª Operating Systems Concepts <a class="header-anchor" href="#üíª-operating-systems-concepts" aria-label="Permalink to &quot;üíª Operating Systems Concepts&quot;">‚Äã</a></h1><h3 id="_1Ô∏è‚É£-what-is-an-operating-system" tabindex="-1">1Ô∏è‚É£ What is an Operating System? <a class="header-anchor" href="#_1Ô∏è‚É£-what-is-an-operating-system" aria-label="Permalink to &quot;1Ô∏è‚É£ What is an Operating System?&quot;">‚Äã</a></h3><p>An <strong>Operating System (OS)</strong> acts as an intermediary between the <strong>user</strong> and the <strong>computer hardware</strong>, managing resources and facilitating user interactions.</p><hr><h3 id="_2Ô∏è‚É£-types-of-operating-systems" tabindex="-1">2Ô∏è‚É£ Types of Operating Systems: <a class="header-anchor" href="#_2Ô∏è‚É£-types-of-operating-systems" aria-label="Permalink to &quot;2Ô∏è‚É£ Types of Operating Systems:&quot;">‚Äã</a></h3><ul><li><strong>Batched OS</strong></li><li><strong>Real-Time OS</strong></li><li><strong>Time-Sharing OS</strong></li><li><strong>Distributed OS</strong></li><li><strong>Multiprogrammed OS</strong></li></ul><hr><h3 id="_3Ô∏è‚É£-basic-functions-of-an-os" tabindex="-1">3Ô∏è‚É£ Basic Functions of an OS: <a class="header-anchor" href="#_3Ô∏è‚É£-basic-functions-of-an-os" aria-label="Permalink to &quot;3Ô∏è‚É£ Basic Functions of an OS:&quot;">‚Äã</a></h3><ul><li><strong>Resource Allocation</strong></li><li><strong>Program Control to Prevent Errors</strong></li></ul><hr><h3 id="_4Ô∏è‚É£-what-is-the-kernel" tabindex="-1">4Ô∏è‚É£ What is the Kernel? <a class="header-anchor" href="#_4Ô∏è‚É£-what-is-the-kernel" aria-label="Permalink to &quot;4Ô∏è‚É£ What is the Kernel?&quot;">‚Äã</a></h3><p>The <strong>kernel</strong> is the <strong>core</strong> of an OS, providing essential services to all parts of the operating system.</p><hr><h3 id="_5Ô∏è‚É£-what-is-a-process" tabindex="-1">5Ô∏è‚É£ What is a Process? <a class="header-anchor" href="#_5Ô∏è‚É£-what-is-a-process" aria-label="Permalink to &quot;5Ô∏è‚É£ What is a Process?&quot;">‚Äã</a></h3><p>A <strong>process</strong> is the execution of a program, categorized into:</p><ul><li><strong>OS Process</strong></li><li><strong>User Process</strong></li></ul><hr><h3 id="_6Ô∏è‚É£-states-of-a-process" tabindex="-1">6Ô∏è‚É£ States of a Process: <a class="header-anchor" href="#_6Ô∏è‚É£-states-of-a-process" aria-label="Permalink to &quot;6Ô∏è‚É£ States of a Process:&quot;">‚Äã</a></h3><p>Processes transition through the following states:</p><ul><li><strong>New ‚Üí Ready ‚Üí Running ‚Üí Waiting ‚Üí Terminated</strong></li><li><strong>Create ‚Üí Admitted ‚Üí Interrupt/Dispatch ‚Üí I/O ‚Üí Exit</strong></li></ul><hr><h3 id="_7Ô∏è‚É£-what-is-starvation-and-aging" tabindex="-1">7Ô∏è‚É£ What is Starvation and Aging? <a class="header-anchor" href="#_7Ô∏è‚É£-what-is-starvation-and-aging" aria-label="Permalink to &quot;7Ô∏è‚É£ What is Starvation and Aging?&quot;">‚Äã</a></h3><ul><li><strong>Starvation:</strong> A resource management issue where a process waits indefinitely for resources.</li><li><strong>Aging:</strong> A technique to avoid starvation by gradually increasing the priority of waiting processes.</li></ul><hr><h3 id="_8Ô∏è‚É£-what-is-a-semaphore" tabindex="-1">8Ô∏è‚É£ What is a Semaphore? <a class="header-anchor" href="#_8Ô∏è‚É£-what-is-a-semaphore" aria-label="Permalink to &quot;8Ô∏è‚É£ What is a Semaphore?&quot;">‚Äã</a></h3><p>A <strong>semaphore</strong> is a variable used for controlling access to common resources.<br><strong>Types:</strong></p><ul><li><strong>Binary Semaphore</strong></li><li><strong>Counting Semaphore</strong></li></ul><hr><h3 id="_9Ô∏è‚É£-what-is-context-switching" tabindex="-1">9Ô∏è‚É£ What is Context Switching? <a class="header-anchor" href="#_9Ô∏è‚É£-what-is-context-switching" aria-label="Permalink to &quot;9Ô∏è‚É£ What is Context Switching?&quot;">‚Äã</a></h3><p><strong>Context switching</strong> transfers control from one process to another, involving saving and loading the process states.</p><hr><h3 id="üîü-what-is-a-thread" tabindex="-1">üîü What is a Thread? <a class="header-anchor" href="#üîü-what-is-a-thread" aria-label="Permalink to &quot;üîü What is a Thread?&quot;">‚Äã</a></h3><p>A <strong>thread</strong> is a lightweight process, a basic unit of CPU utilization comprising:</p><ul><li>Thread ID</li><li>Program Counter</li><li>Register Set</li><li>Stack</li></ul><hr><h3 id="_1Ô∏è‚É£1Ô∏è‚É£-what-is-process-synchronization" tabindex="-1">1Ô∏è‚É£1Ô∏è‚É£ What is Process Synchronization? <a class="header-anchor" href="#_1Ô∏è‚É£1Ô∏è‚É£-what-is-process-synchronization" aria-label="Permalink to &quot;1Ô∏è‚É£1Ô∏è‚É£ What is Process Synchronization?&quot;">‚Äã</a></h3><p><strong>Process synchronization</strong> ensures only one process manipulates shared data at a time, avoiding <strong>race conditions</strong>.</p><hr><h3 id="_1Ô∏è‚É£2Ô∏è‚É£-what-is-cache-memory" tabindex="-1">1Ô∏è‚É£2Ô∏è‚É£ What is Cache Memory? <a class="header-anchor" href="#_1Ô∏è‚É£2Ô∏è‚É£-what-is-cache-memory" aria-label="Permalink to &quot;1Ô∏è‚É£2Ô∏è‚É£ What is Cache Memory?&quot;">‚Äã</a></h3><p><strong>Cache memory</strong> is a fast-access memory where the microprocessor first looks for data before accessing RAM.<br> Memory hierarchy:</p><ul><li><strong>Registers ‚Üí L1 Cache ‚Üí L2 Cache ‚Üí RAM ‚Üí Secondary Memory</strong></li></ul><hr><h3 id="_1Ô∏è‚É£3Ô∏è‚É£-what-is-virtual-memory" tabindex="-1">1Ô∏è‚É£3Ô∏è‚É£ What is Virtual Memory? <a class="header-anchor" href="#_1Ô∏è‚É£3Ô∏è‚É£-what-is-virtual-memory" aria-label="Permalink to &quot;1Ô∏è‚É£3Ô∏è‚É£ What is Virtual Memory?&quot;">‚Äã</a></h3><p><strong>Virtual memory</strong> allows secondary storage to function as main memory.<br> Benefits:</p><ul><li>No need for physical address management</li><li>Each process has a virtual-to-physical address mapping</li></ul><hr><h3 id="_1Ô∏è‚É£4Ô∏è‚É£-logical-vs-physical-address-space" tabindex="-1">1Ô∏è‚É£4Ô∏è‚É£ Logical vs Physical Address Space: <a class="header-anchor" href="#_1Ô∏è‚É£4Ô∏è‚É£-logical-vs-physical-address-space" aria-label="Permalink to &quot;1Ô∏è‚É£4Ô∏è‚É£ Logical vs Physical Address Space:&quot;">‚Äã</a></h3><ul><li><strong>Logical Address:</strong> Size of the process (virtual space)</li><li><strong>Physical Address:</strong> Size of the main memory</li></ul><hr><h3 id="_1Ô∏è‚É£5Ô∏è‚É£-compiler-vs-interpreter" tabindex="-1">1Ô∏è‚É£5Ô∏è‚É£ Compiler vs Interpreter: <a class="header-anchor" href="#_1Ô∏è‚É£5Ô∏è‚É£-compiler-vs-interpreter" aria-label="Permalink to &quot;1Ô∏è‚É£5Ô∏è‚É£ Compiler vs Interpreter:&quot;">‚Äã</a></h3><ul><li><strong>Compiler:</strong> Translates code into machine code <strong>before</strong> execution.</li><li><strong>Interpreter:</strong> Translates code <strong>line-by-line</strong> during execution.</li></ul><hr><h3 id="_1Ô∏è‚É£6Ô∏è‚É£-definitions" tabindex="-1">1Ô∏è‚É£6Ô∏è‚É£ Definitions: <a class="header-anchor" href="#_1Ô∏è‚É£6Ô∏è‚É£-definitions" aria-label="Permalink to &quot;1Ô∏è‚É£6Ô∏è‚É£ Definitions:&quot;">‚Äã</a></h3><ul><li><strong>Throughput:</strong> Number of processes completed per time unit.</li><li><strong>Turnaround Time:</strong> Time taken to execute a process.</li><li><strong>Waiting Time:</strong> Time spent in the ready queue.</li><li><strong>Response Time:</strong> Time between a request and the start of the response.</li></ul><hr><h3 id="_1Ô∏è‚É£7Ô∏è‚É£-what-is-a-real-time-system" tabindex="-1">1Ô∏è‚É£7Ô∏è‚É£ What is a Real-Time System? <a class="header-anchor" href="#_1Ô∏è‚É£7Ô∏è‚É£-what-is-a-real-time-system" aria-label="Permalink to &quot;1Ô∏è‚É£7Ô∏è‚É£ What is a Real-Time System?&quot;">‚Äã</a></h3><p>A <strong>real-time system</strong> processes data as it comes with strict time constraints, ensuring prompt responses to events.</p><hr><h3 id="_1Ô∏è‚É£8Ô∏è‚É£-long-term-vs-short-term-schedulers" tabindex="-1">1Ô∏è‚É£8Ô∏è‚É£ Long-Term vs Short-Term Schedulers: <a class="header-anchor" href="#_1Ô∏è‚É£8Ô∏è‚É£-long-term-vs-short-term-schedulers" aria-label="Permalink to &quot;1Ô∏è‚É£8Ô∏è‚É£ Long-Term vs Short-Term Schedulers:&quot;">‚Äã</a></h3><ul><li><strong>Long-Term Scheduler (LTS):</strong> Loads processes into memory from the job queue.</li><li><strong>Short-Term Scheduler (STS):</strong> Allocates CPU to processes from the ready queue.</li></ul><hr><h3 id="_1Ô∏è‚É£9Ô∏è‚É£-what-is-a-distributed-system" tabindex="-1">1Ô∏è‚É£9Ô∏è‚É£ What is a Distributed System? <a class="header-anchor" href="#_1Ô∏è‚É£9Ô∏è‚É£-what-is-a-distributed-system" aria-label="Permalink to &quot;1Ô∏è‚É£9Ô∏è‚É£ What is a Distributed System?&quot;">‚Äã</a></h3><p>A <strong>distributed system</strong> operates in a network, sharing resources and communication between multiple systems.</p><hr><h3 id="_2Ô∏è‚É£0Ô∏è‚É£-what-is-a-daemon" tabindex="-1">2Ô∏è‚É£0Ô∏è‚É£ What is a Daemon? <a class="header-anchor" href="#_2Ô∏è‚É£0Ô∏è‚É£-what-is-a-daemon" aria-label="Permalink to &quot;2Ô∏è‚É£0Ô∏è‚É£ What is a Daemon?&quot;">‚Äã</a></h3><p>A <strong>daemon</strong> is a background program that runs without user input, typically in Unix or Linux systems, managing resources and automating tasks.</p><hr><h3 id="_2Ô∏è‚É£1Ô∏è‚É£-what-is-busy-waiting" tabindex="-1">2Ô∏è‚É£1Ô∏è‚É£ What is Busy Waiting? <a class="header-anchor" href="#_2Ô∏è‚É£1Ô∏è‚É£-what-is-busy-waiting" aria-label="Permalink to &quot;2Ô∏è‚É£1Ô∏è‚É£ What is Busy Waiting?&quot;">‚Äã</a></h3><p><strong>Busy waiting</strong> occurs when a process repeatedly checks for a condition to be met before continuing execution.</p><hr><h3 id="_2Ô∏è‚É£2Ô∏è‚É£-dual-mode-operation" tabindex="-1">2Ô∏è‚É£2Ô∏è‚É£ Dual-Mode Operation: <a class="header-anchor" href="#_2Ô∏è‚É£2Ô∏è‚É£-dual-mode-operation" aria-label="Permalink to &quot;2Ô∏è‚É£2Ô∏è‚É£ Dual-Mode Operation:&quot;">‚Äã</a></h3><ul><li><strong>User Mode</strong></li><li><strong>Kernel Mode</strong></li></ul><hr><h3 id="_2Ô∏è‚É£3Ô∏è‚É£-path-types" tabindex="-1">2Ô∏è‚É£3Ô∏è‚É£ Path Types: <a class="header-anchor" href="#_2Ô∏è‚É£3Ô∏è‚É£-path-types" aria-label="Permalink to &quot;2Ô∏è‚É£3Ô∏è‚É£ Path Types:&quot;">‚Äã</a></h3><ul><li><strong>Absolute Path:</strong> The exact path from the root directory.</li><li><strong>Relative Path:</strong> A path relative to the current location.</li></ul><hr><h3 id="_2Ô∏è‚É£4Ô∏è‚É£-what-is-dram" tabindex="-1">2Ô∏è‚É£4Ô∏è‚É£ What is DRAM? <a class="header-anchor" href="#_2Ô∏è‚É£4Ô∏è‚É£-what-is-dram" aria-label="Permalink to &quot;2Ô∏è‚É£4Ô∏è‚É£ What is DRAM?&quot;">‚Äã</a></h3><p><strong>Dynamic RAM (DRAM)</strong> stores data as electrical capacitance, while <strong>Static RAM (SRAM)</strong> stores data as voltage levels.</p>',78),o=[i];function n(h,l,c,g,d,u){return t(),a("div",null,o)}const y=e(r,[["render",n]]);export{p as __pageData,y as default};
