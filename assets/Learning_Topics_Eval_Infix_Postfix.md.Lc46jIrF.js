import{_ as a,c as s,o as e,a4 as n}from"./chunks/framework.B7YSrJ1r.js";const m=JSON.parse('{"title":"Evaluation of Prefix and Postfix Expressions Using Stack","description":"","frontmatter":{},"headers":[],"relativePath":"Learning/Topics/Eval_Infix_Postfix.md","filePath":"Learning/Topics/Eval_Infix_Postfix.md","lastUpdated":1725991274000}'),i={name:"Learning/Topics/Eval_Infix_Postfix.md"},p=n(`<h1 id="evaluation-of-prefix-and-postfix-expressions-using-stack" tabindex="-1">Evaluation of Prefix and Postfix Expressions Using Stack <a class="header-anchor" href="#evaluation-of-prefix-and-postfix-expressions-using-stack" aria-label="Permalink to &quot;Evaluation of Prefix and Postfix Expressions Using Stack&quot;">​</a></h1><h2 id="postfix-expression" tabindex="-1">Postfix Expression <a class="header-anchor" href="#postfix-expression" aria-label="Permalink to &quot;Postfix Expression&quot;">​</a></h2><h3 id="given-expression" tabindex="-1">Given Expression: <a class="header-anchor" href="#given-expression" aria-label="Permalink to &quot;Given Expression:&quot;">​</a></h3><p><strong>{(A*B) + (C*D)} - E</strong></p><p>Convert this expression into the postfix form:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{(A*B) + (C*D)} - E</span></span>
<span class="line"><span>Step 1: {(AB*) + (CD*)} - E</span></span>
<span class="line"><span>Step 2: {(AB*) (CD*) +} E -</span></span>
<span class="line"><span>Step 3: (AB*) (CD*) + E -</span></span>
<span class="line"><span>Final Postfix: A B * C D * + E -</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="example" tabindex="-1">Example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example:&quot;">​</a></h3><h4 id="values" tabindex="-1">Values: <a class="header-anchor" href="#values" aria-label="Permalink to &quot;Values:&quot;">​</a></h4><p>A = 2, B = 3, C = 4, D = 5, E = 6</p><p>Expression:<br><strong>{(A*B) + (C*D)} - E</strong></p><p>Postfix:<br><strong>A B * C D * + E -</strong></p><h3 id="step-by-step-evaluation" tabindex="-1">Step-by-Step Evaluation: <a class="header-anchor" href="#step-by-step-evaluation" aria-label="Permalink to &quot;Step-by-Step Evaluation:&quot;">​</a></h3><ol><li>Replace the variables with values:</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2 3 * 4 5 * + 6 -</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><p>Traverse from <strong>left to right</strong>, applying the operator when encountered to the two preceding operands:</p><p>Ente the Operand from left to right into the stack when the operator is encountered pop out two operands and perform the operation on them and again push into the stack.</p></li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2 3 * 4 5 * + 6 -</span></span>
<span class="line"><span>=&gt; 6 4 5 * + 6 -  (2*3 = 6)</span></span>
<span class="line"><span>=&gt; 6 20 + 6 -    (4*5 = 20)</span></span>
<span class="line"><span>=&gt; 26 6 -        (6+20 = 26)</span></span>
<span class="line"><span>=&gt; 20            (26-6 = 20)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="prefix-expression" tabindex="-1">Prefix Expression <a class="header-anchor" href="#prefix-expression" aria-label="Permalink to &quot;Prefix Expression&quot;">​</a></h2><h3 id="given-expression-1" tabindex="-1">Given Expression: <a class="header-anchor" href="#given-expression-1" aria-label="Permalink to &quot;Given Expression:&quot;">​</a></h3><p><strong>{(A*B) + (C*D)} - E</strong></p><p>Convert this expression into the prefix form:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{(A*B) + (C*D)} - E</span></span>
<span class="line"><span>Step 1: - {(+ (* A B) (* C D))} E</span></span>
<span class="line"><span>Step 2: - + * A B * C D E</span></span>
<span class="line"><span>Final Prefix: - + * A B * C D E</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="example-1" tabindex="-1">Example: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example:&quot;">​</a></h3><h4 id="values-1" tabindex="-1">Values: <a class="header-anchor" href="#values-1" aria-label="Permalink to &quot;Values:&quot;">​</a></h4><p>A = 2, B = 3, C = 4, D = 5, E = 6</p><p>Expression:<br><strong>{(A*B) + (C*D)} - E</strong></p><p>Prefix:<br><strong>- + * A B * C D E</strong></p><h3 id="step-by-step-evaluation-1" tabindex="-1">Step-by-Step Evaluation: <a class="header-anchor" href="#step-by-step-evaluation-1" aria-label="Permalink to &quot;Step-by-Step Evaluation:&quot;">​</a></h3><ol><li>Replace the variables with values:</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- + * 2 3 * 4 5 6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><p>Traverse from <strong>right to left</strong>, applying the operator when encountered to the two subsequent operands:</p><p>Ente the Operand from right to left into the stack when the operator is encountered pop out two operands and perform the operation on them and again push into the stack.</p></li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- + * 2 3 * 4 5 6</span></span>
<span class="line"><span>=&gt; - + * 2 3 20 6  (4*5 = 20)</span></span>
<span class="line"><span>=&gt; - + 6 20 6     (2*3 = 6)</span></span>
<span class="line"><span>=&gt; - 26 6         (6+20 = 26)</span></span>
<span class="line"><span>=&gt; 20             (26-6 = 20)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,31),t=[p];function r(l,o,c,d,h,u){return e(),s("div",null,t)}const x=a(i,[["render",r]]);export{m as __pageData,x as default};
