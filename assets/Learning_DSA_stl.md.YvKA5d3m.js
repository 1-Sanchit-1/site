import{_ as t,c as e,o as d,a4 as s}from"./chunks/framework.B7YSrJ1r.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Learning/DSA/stl.md","filePath":"Learning/DSA/stl.md","lastUpdated":1726575452000}'),a={name:"Learning/DSA/stl.md"},r=s('<h3 id="_1-vector-vector-int-v" tabindex="-1">1. <strong>Vector (<code>vector&lt;int&gt; v</code>)</strong> <a class="header-anchor" href="#_1-vector-vector-int-v" aria-label="Permalink to &quot;1. **Vector (`vector&lt;int&gt; v`)**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Method</th><th>Description</th><th>Time Complexity</th></tr></thead><tbody><tr><td><code>v.push_back()</code></td><td>Adds an element to the end</td><td>Amortized O(1)</td></tr><tr><td><code>v.pop_back()</code></td><td>Removes the last element</td><td>O(1)</td></tr><tr><td><code>v.back()</code></td><td>Accesses the last element</td><td>O(1)</td></tr><tr><td><code>v.front()</code></td><td>Accesses the first element</td><td>O(1)</td></tr><tr><td><code>v.size()</code></td><td>Returns the number of elements</td><td>O(1)</td></tr><tr><td><code>v.erase(it)</code></td><td>Removes element at iterator <code>it</code></td><td>O(n)</td></tr><tr><td><code>v.erase(it1, it2)</code></td><td>Removes elements in the range <code>[it1, it2)</code></td><td>O(n)</td></tr><tr><td><code>v.insert(it, val)</code></td><td>Inserts <code>val</code> before the iterator <code>it</code></td><td>O(n)</td></tr><tr><td><code>v.clear()</code></td><td>Removes all elements</td><td>O(n)</td></tr><tr><td><code>v.at(i)</code></td><td>Accesses the element at index <code>i</code></td><td>O(1)</td></tr><tr><td><code>v[i]</code></td><td>Accesses the element at index <code>i</code></td><td>O(1)</td></tr></tbody></table><hr><h3 id="_2-map-map-int-int-mp" tabindex="-1">2. <strong>Map (<code>map&lt;int, int&gt; mp</code>)</strong> <a class="header-anchor" href="#_2-map-map-int-int-mp" aria-label="Permalink to &quot;2. **Map (`map&lt;int, int&gt; mp`)**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Method</th><th>Description</th><th>Time Complexity</th></tr></thead><tbody><tr><td><code>mp.insert({key, val})</code></td><td>Inserts a key-value pair</td><td>O(log n)</td></tr><tr><td><code>mp.erase(key)</code></td><td>Removes an element by key</td><td>O(log n)</td></tr><tr><td><code>mp.erase(it)</code></td><td>Removes element at iterator <code>it</code></td><td>O(1)</td></tr><tr><td><code>mp.find(key)</code></td><td>Finds the iterator to the key, if it exists</td><td>O(log n)</td></tr><tr><td><code>mp.count(key)</code></td><td>Checks if the key exists (returns 1 or 0)</td><td>O(log n)</td></tr><tr><td><code>mp[key]</code></td><td>Accesses or inserts the value associated with key</td><td>O(log n)</td></tr><tr><td><code>mp.clear()</code></td><td>Removes all elements</td><td>O(n)</td></tr><tr><td><code>mp.size()</code></td><td>Returns the number of elements</td><td>O(1)</td></tr></tbody></table><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Access key and value from map iterator</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">it-&gt;first  ,second</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">it-&gt;second ;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><table tabindex="0"><thead><tr><th>Operation</th><th><code>map</code> (Balanced Tree)</th><th><code>unordered_map</code> (Hash Table)</th></tr></thead><tbody><tr><td>Insertion</td><td>O(log n)</td><td>O(1) average, O(n) worst case</td></tr><tr><td>Deletion</td><td>O(log n)</td><td>O(1) average, O(n) worst case</td></tr><tr><td>Search</td><td>O(log n)</td><td>O(1) average, O(n) worst case</td></tr><tr><td>Ordered traversal</td><td>Yes (in key order)</td><td>No (unordered traversal)</td></tr></tbody></table><hr><h3 id="_3-set-set-int-s" tabindex="-1">3. <strong>Set (<code>set&lt;int&gt; s</code>)</strong> <a class="header-anchor" href="#_3-set-set-int-s" aria-label="Permalink to &quot;3. **Set (`set&lt;int&gt; s`)**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Method</th><th>Description</th><th>Time Complexity</th></tr></thead><tbody><tr><td><code>s.insert(val)</code></td><td>Inserts an element</td><td>O(log n)</td></tr><tr><td><code>s.erase(it)</code></td><td>Removes element at iterator <code>it</code></td><td>O(1)</td></tr><tr><td><code>s.erase(val)</code></td><td>Removes the element with value <code>val</code></td><td>O(log n)</td></tr><tr><td><code>s.find(val)</code></td><td>Finds the iterator to the element, if it exists</td><td>O(log n)</td></tr><tr><td><code>s.count(val)</code></td><td>Checks if the value exists</td><td>O(log n)</td></tr><tr><td><code>s.clear()</code></td><td>Removes all elements</td><td>O(n)</td></tr><tr><td><code>s.size()</code></td><td>Returns the number of elements</td><td>O(1)</td></tr><tr><td><code>s.begin()</code></td><td>Returns an iterator to the first element</td><td>O(1)</td></tr><tr><td><code>s.end()</code></td><td>Returns an iterator to the element after the last</td><td>O(1)</td></tr></tbody></table><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">it ;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Dereference set iterator to get value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><table tabindex="0"><thead><tr><th>Operation</th><th><code>set</code> (Balanced Tree)</th><th><code>unordered_set</code> (Hash Table)</th></tr></thead><tbody><tr><td>Insertion</td><td>O(log n)</td><td>O(1) average, O(n) worst case</td></tr><tr><td>Deletion</td><td>O(log n)</td><td>O(1) average, O(n) worst case</td></tr><tr><td>Search</td><td>O(log n)</td><td>O(1) average, O(n) worst case</td></tr><tr><td>Ordered traversal</td><td>Yes (in key order)</td><td>No (unordered traversal)</td></tr><tr><td>Access by key</td><td>O(log n)</td><td>O(1) average, O(n) worst case</td></tr><tr><td>Size</td><td>O(1)</td><td>O(1)</td></tr><tr><td>Clear</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><hr><h3 id="_4-queue-queue-int-q" tabindex="-1">4. <strong>Queue (<code>queue&lt;int&gt; q</code>)</strong> <a class="header-anchor" href="#_4-queue-queue-int-q" aria-label="Permalink to &quot;4. **Queue (`queue&lt;int&gt; q`)**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Method</th><th>Description</th><th>Time Complexity</th></tr></thead><tbody><tr><td><code>q.push(val)</code></td><td>Adds an element to the back</td><td>O(1)</td></tr><tr><td><code>q.pop()</code></td><td>Removes the front element</td><td>O(1)</td></tr><tr><td><code>q.front()</code></td><td>Accesses the front element</td><td>O(1)</td></tr><tr><td><code>q.back()</code></td><td>Accesses the back element</td><td>O(1)</td></tr><tr><td><code>q.size()</code></td><td>Returns the number of elements</td><td>O(1)</td></tr><tr><td><code>q.empty()</code></td><td>Checks if the queue is empty</td><td>O(1)</td></tr></tbody></table><hr><h3 id="_5-priority-queue-priority-queue-int-pq" tabindex="-1">5. <strong>Priority Queue (<code>priority_queue&lt;int&gt; pq</code>)</strong> <a class="header-anchor" href="#_5-priority-queue-priority-queue-int-pq" aria-label="Permalink to &quot;5. **Priority Queue (`priority_queue&lt;int&gt; pq`)**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Method</th><th>Description</th><th>Time Complexity</th></tr></thead><tbody><tr><td><code>pq.push(val)</code></td><td>Adds an element (maintains heap property)</td><td>O(log n)</td></tr><tr><td><code>pq.pop()</code></td><td>Removes the top element (maintains heap property)</td><td>O(log n)</td></tr><tr><td><code>pq.top()</code></td><td>Accesses the top element</td><td>O(1)</td></tr><tr><td><code>pq.size()</code></td><td>Returns the number of elements</td><td>O(1)</td></tr><tr><td><code>pq.empty()</code></td><td>Checks if the priority queue is empty</td><td>O(1)</td></tr></tbody></table><hr><h3 id="_6-stack-stack-int-st" tabindex="-1">6. <strong>Stack (<code>stack&lt;int&gt; st</code>)</strong> <a class="header-anchor" href="#_6-stack-stack-int-st" aria-label="Permalink to &quot;6. **Stack (`stack&lt;int&gt; st`)**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Method</th><th>Description</th><th>Time Complexity</th></tr></thead><tbody><tr><td><code>st.push(val)</code></td><td>Pushes an element onto the stack</td><td>O(1)</td></tr><tr><td><code>st.pop()</code></td><td>Removes the top element</td><td>O(1)</td></tr><tr><td><code>st.top()</code></td><td>Accesses the top element</td><td>O(1)</td></tr><tr><td><code>st.size()</code></td><td>Returns the number of elements</td><td>O(1)</td></tr><tr><td><code>st.empty()</code></td><td>Checks if the stack is empty</td><td>O(1)</td></tr></tbody></table><hr>',24),i=[r];function o(n,c,h,l,p,m){return d(),e("div",null,i)}const b=t(a,[["render",o]]);export{u as __pageData,b as default};
