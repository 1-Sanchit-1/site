import{_ as s,c as e,o as a,a4 as t}from"./chunks/framework.B7YSrJ1r.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Learning/System Design/sql_vs_nosql.md","filePath":"Learning/System Design/sql_vs_nosql.md","lastUpdated":1729440396000}'),o={name:"Learning/System Design/sql_vs_nosql.md"},n=t('<p>The difference between <strong>SQL (Structured Query Language)</strong> and <strong>NoSQL (Not Only SQL)</strong> databases lies in their structure, scalability, and the way data is stored and queried.</p><h3 id="sql-databases" tabindex="-1">SQL Databases: <a class="header-anchor" href="#sql-databases" aria-label="Permalink to &quot;SQL Databases:&quot;">​</a></h3><ol><li><strong>Structured Data</strong>: SQL databases use a fixed schema, where data is stored in tables with rows and columns.</li><li><strong>ACID Compliance</strong>: Ensures reliability with <strong>Atomicity</strong>, <strong>Consistency</strong>, <strong>Isolation</strong>, and <strong>Durability</strong>, making SQL databases a good choice for critical transactions.</li><li><strong>Joins &amp; Relations</strong>: Data in SQL databases can be related using <strong>foreign keys</strong>, which allow complex queries across multiple tables (joins).</li><li><strong>Scalability</strong>: Typically, SQL databases are <strong>vertically scalable</strong> (upgrading the hardware), though some modern SQL databases also support horizontal scaling.</li></ol><h3 id="nosql-databases" tabindex="-1">NoSQL Databases: <a class="header-anchor" href="#nosql-databases" aria-label="Permalink to &quot;NoSQL Databases:&quot;">​</a></h3><ol><li><strong>Flexible Data Models</strong>: NoSQL databases store data in a variety of formats, including <strong>documents</strong> (e.g., MongoDB), <strong>key-value pairs</strong> (e.g., Redis), <strong>graphs</strong> (e.g., Neo4j), or <strong>column-based</strong> (e.g., Cassandra). These allow for <strong>schema-less</strong> structures.</li><li><strong>Eventual Consistency</strong>: Many NoSQL databases prioritize availability and partition tolerance over consistency (CAP theorem), providing <strong>eventual consistency</strong> instead of strong consistency.</li><li><strong>Horizontal Scalability</strong>: NoSQL databases are designed to scale horizontally across distributed servers, making them better for large-scale, distributed systems.</li><li><strong>Faster for Certain Operations</strong>: NoSQL databases often provide faster read and write operations for specific tasks, especially in high-throughput systems.</li></ol><h3 id="when-to-use-sql" tabindex="-1">When to Use SQL: <a class="header-anchor" href="#when-to-use-sql" aria-label="Permalink to &quot;When to Use SQL:&quot;">​</a></h3><ul><li><strong>Structured Data</strong>: When your data is highly structured and the relationships between data are well-defined.</li><li><strong>Consistency is Critical</strong>: When ACID transactions are required (e.g., financial applications).</li><li><strong>Complex Queries</strong>: When you need to perform complex queries, such as joins between multiple tables.</li></ul><h3 id="when-to-use-nosql" tabindex="-1">When to Use NoSQL: <a class="header-anchor" href="#when-to-use-nosql" aria-label="Permalink to &quot;When to Use NoSQL:&quot;">​</a></h3><ul><li><strong>Unstructured or Semi-Structured Data</strong>: Ideal when dealing with large volumes of unstructured data (e.g., logs, social media data).</li><li><strong>High-Speed, High-Volume Operations</strong>: For scenarios where speed is crucial and the data structure is flexible, such as in real-time analytics or caching systems.</li><li><strong>Scalability</strong>: When you need to handle massive data loads across distributed systems (e.g., large-scale applications like social networks).</li></ul>',9),r=[n];function i(l,d,g,c,u,h){return a(),e("div",null,r)}const p=s(o,[["render",i]]);export{m as __pageData,p as default};
